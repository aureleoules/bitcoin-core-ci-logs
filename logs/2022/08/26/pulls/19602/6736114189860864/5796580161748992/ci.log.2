[0;34m node0 2022-08-26T19:00:36.412609Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.12ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.412688Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.070ms/tx, 0.000ms/txin) [0.03s (0.17ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.412759Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.412821Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.07ms (0 packages, 0 updated descendants), validity: 0.61ms (total 0.68ms) [0m
[0;34m node0 2022-08-26T19:00:36.412938Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.413005Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (419Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.413127Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 2afdb0312ea6a25b850f4040c8789f092954c70cd06a6889eefb3163462e639c  new [0m
[0;34m node0 2022-08-26T19:00:36.413205Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (127Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.413641Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=369b8bad1b186a65c5864a4e7208d717a536bbd2fb8cff77c15434110d082ae2 fork block hash=19a35111169d097cdc6e475d7c6fe6de97f2aaecec211bcec17f2815c5294ed1 (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.414179Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c [0m
[0;34m node0 2022-08-26T19:00:36.414937Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.414999Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.06ms [0.02s (0.12ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415086Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415161Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.08ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415268Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.070ms/tx, 0.000ms/txin) [0.03s (0.17ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415348Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.18ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415471Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.13ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415524Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415590Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.415674Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.68ms [0.10s (0.51ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415727Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.415792Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.416390Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.416510Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c height=95 version=0x20000000 log2_work=7.584963 tx=96 date='2022-08-26T19:00:52Z' progress=1.000000 cache=0.0MiB(95txo) [0m
[0;34m node0 2022-08-26T19:00:36.416571Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.78ms [0.09s (0.47ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.416617Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.63ms [0.22s (1.17ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.416680Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.416794Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c block height=95 [0m
[0;34m node0 2022-08-26T19:00:36.416903Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c fork block hash=369b8bad1b186a65c5864a4e7208d717a536bbd2fb8cff77c15434110d082ae2 (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.416972Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c block height=95 [0m
[0;34m node0 2022-08-26T19:00:36.417185Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.417505Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (244Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.417592Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.417666Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.417924Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.418029Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.418117Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.418199Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.12ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.418307Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.10ms (0.098ms/tx, 0.000ms/txin) [0.03s (0.17ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.418385Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.18ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.418446Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.59ms (total 0.67ms) [0m
[0;34m node0 2022-08-26T19:00:36.418557Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.418622Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (446Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.418740Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 64b2476682b2baf7e62e9bbca3c93cd750991cec3732cbf9c3da14e03648ac20  new [0m
[0;34m node0 2022-08-26T19:00:36.418816Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (123Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.419337Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c [0m
[0;34m node0 2022-08-26T19:00:36.431463Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c fork block hash=369b8bad1b186a65c5864a4e7208d717a536bbd2fb8cff77c15434110d082ae2 (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.432400Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.432488Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.08ms [0.02s (0.12ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.432585Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.432669Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.09ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.432754Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.08ms (0.076ms/tx, 0.000ms/txin) [0.03s (0.17ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.432827Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.432958Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.13ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.433014Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.433086Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.433178Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.70ms [0.10s (0.51ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.433270Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.433346Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.11ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.433931Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.434058Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c height=96 version=0x20000000 log2_work=7.599913 tx=97 date='2022-08-26T19:00:52Z' progress=1.000000 cache=0.0MiB(96txo) [0m
[0;34m node0 2022-08-26T19:00:36.434113Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.77ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.434160Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.72ms [0.22s (1.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.434249Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.434366Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c block height=96 [0m
[0;34m node0 2022-08-26T19:00:36.434479Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c fork block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.434555Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c block height=96 [0m
[0;34m node0 2022-08-26T19:00:36.434782Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.435084Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (223Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.435172Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.435273Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (11Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.435544Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.435666Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.435774Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.435858Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.16ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.435938Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.072ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.436009Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.436069Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.59ms (total 0.68ms) [0m
[0;34m node0 2022-08-26T19:00:36.436181Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.436268Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (419Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.436405Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 35e9fb1a40361cd3e4cedb8fa58a842d76d2186e082f5c3dfa9d3a3867bfa8d7  new [0m
[0;34m node0 2022-08-26T19:00:36.436474Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (152Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.436755Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c fork block hash=61a99a3e6c045d70f2f4b0c3027cd86dc4fbdd89b056c79fe851a7f7c58cfd8c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.437330Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e [0m
[0;34m node0 2022-08-26T19:00:36.438062Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.438124Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.05ms [0.02s (0.12ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438211Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438325Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.11ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438403Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.08ms (0.076ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438475Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438596Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.12ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438650Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438713Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.438798Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.68ms [0.10s (0.51ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438852Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.438917Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.439524Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.439650Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e height=97 version=0x20000000 log2_work=7.614710 tx=98 date='2022-08-26T19:00:52Z' progress=1.000000 cache=0.0MiB(97txo) [0m
[0;34m node0 2022-08-26T19:00:36.439713Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.79ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.439759Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.65ms [0.23s (1.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.439814Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.439917Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e block height=97 [0m
[0;34m node0 2022-08-26T19:00:36.440026Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e fork block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.440114Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e block height=97 [0m
[0;34m node0 2022-08-26T19:00:36.440335Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.440637Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (222Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.440721Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.440796Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (9Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.441066Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.441137Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.441253Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.441340Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.12ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.441418Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.074ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.441488Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.441548Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.55ms (total 0.63ms) [0m
[0;34m node0 2022-08-26T19:00:36.441661Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.441727Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (454Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.441843Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 6595fce33df19156fa3ba8fbe38515bab6744e4e77d10722a399a122a8ff59f7  new [0m
[0;34m node0 2022-08-26T19:00:36.441925Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (125Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.442241Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e fork block hash=4348046eea42695389c7ae67fba03ccbd6a69a26937a9b15b7856a2101a1586c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.442782Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c [0m
[0;34m node0 2022-08-26T19:00:36.443551Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.443614Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.06ms [0.02s (0.12ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.443707Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.443782Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.08ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.443858Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.068ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.443927Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.444044Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.12ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.444096Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.444161Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.444277Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.67ms [0.10s (0.51ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.444378Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.10ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.444446Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.07ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.445021Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.445143Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c height=98 version=0x20000000 log2_work=7.629357 tx=99 date='2022-08-26T19:00:53Z' progress=1.000000 cache=0.0MiB(98txo) [0m
[0;34m node0 2022-08-26T19:00:36.445196Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.75ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.445268Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.64ms [0.23s (1.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.445332Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.445434Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c block height=98 [0m
[0;34m node0 2022-08-26T19:00:36.445541Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c fork block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.445629Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c block height=98 [0m
[0;34m node0 2022-08-26T19:00:36.445846Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.446132Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (214Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.446214Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.446318Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.446601Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.446715Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.446808Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.446898Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.14ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.446976Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.069ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.447045Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.447106Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.60ms (total 0.67ms) [0m
[0;34m node0 2022-08-26T19:00:36.447247Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (419Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.447342Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.447434Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 50c4601a952f62baa0eb493d10d02754f53c57b78dcc9040507b0c365e72a786  new [0m
[0;34m node0 2022-08-26T19:00:36.447508Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.447807Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c fork block hash=0f5ab5f3650cc056c7136ebdcdfc9babc875aa0f11a9823f1e18f39f0625790e (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.448334Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 [0m
[0;34m node0 2022-08-26T19:00:36.449063Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.449122Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.05ms [0.02s (0.11ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449207Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449319Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.10ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449398Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.08ms (0.078ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449467Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.15ms (0.000ms/txin) [0.05s (0.25ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449589Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.12ms [0.02s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449642Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.01s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449708Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.449801Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.68ms [0.10s (0.50ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449855Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.449919Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.450520Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.450643Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 height=99 version=0x20000000 log2_work=7.643856 tx=100 date='2022-08-26T19:00:53Z' progress=1.000000 cache=0.0MiB(99txo) [0m
[0;34m node0 2022-08-26T19:00:36.450707Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.78ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.450755Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.64ms [0.23s (1.15ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.450811Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.450913Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 block height=99 [0m
[0;34m node0 2022-08-26T19:00:36.451023Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 fork block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.451113Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 block height=99 [0m
[0;34m node0 2022-08-26T19:00:36.451379Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.451675Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (220Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.451759Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.451835Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.452110Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.452188Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.452299Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.452388Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.10ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.452466Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.070ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.452535Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.24ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.452598Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.57ms (total 0.65ms) [0m
[0;34m node0 2022-08-26T19:00:36.452777Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (421Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.452855Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.452941Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 64c2823f9a2fc6e8b8171576b3046a536356036cdde855a28b0b24d90f61af7c  new [0m
[0;34m node0 2022-08-26T19:00:36.453010Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (12Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.453372Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 fork block hash=64ed8f8ff103968b3bcae4be2b855d9a3580acbb8b54d52eef6311ac3185e62c (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.453898Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a [0m
[0;34m node0 2022-08-26T19:00:36.454660Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.454721Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.06ms [0.02s (0.11ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.454817Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.454893Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.08ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.454970Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.070ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455040Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.24ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455166Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.13ms [0.02s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455247Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.02s (0.07ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455321Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.455410Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.69ms [0.10s (0.50ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455464Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.455529Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.456088Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.456210Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a height=100 version=0x20000000 log2_work=7.658211 tx=101 date='2022-08-26T19:00:53Z' progress=1.000000 cache=0.0MiB(100txo) [0m
[0;34m node0 2022-08-26T19:00:36.456293Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.76ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.456346Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.63ms [0.23s (1.15ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.456403Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.456506Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a block height=100 [0m
[0;34m node0 2022-08-26T19:00:36.456613Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a fork block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.456705Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a block height=100 [0m
[0;34m node0 2022-08-26T19:00:36.456926Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 started [0m
[0;34m node0 2022-08-26T19:00:36.457215Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, net_processing.cpp:1720 completed (212Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.457329Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 started [0m
[0;34m node0 2022-08-26T19:00:36.457405Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention ::cs_main, validation.cpp:5030 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.457672Z [httpworker.0] [node/miner.cpp:163] [CreateNewBlock] CreateNewBlock(): block weight: 900 txs: 0 fees: 0 sigops 400 [0m
[0;34m node0 2022-08-26T19:00:36.457749Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 started [0m
[0;34m node0 2022-08-26T19:00:36.457843Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.01ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.457929Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.09ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.458006Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.070ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.458073Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.24ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.458134Z [httpworker.0] [node/miner.cpp:178] [CreateNewBlock] [bench] CreateNewBlock() packages: 0.08ms (0 packages, 0 updated descendants), validity: 0.53ms (total 0.61ms) [0m
[0;34m node0 2022-08-26T19:00:36.458279Z [scheduler] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, node/interfaces.cpp:543 completed (427Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.458361Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 started [0m
[0;34m node0 2022-08-26T19:00:36.458474Z [httpworker.0] [logging/timer.h:57] [Log] [lock] Enter: lock contention cs_main, validation.cpp:3788 completed (10Î¼s) [0m
[0;34m node0 2022-08-26T19:00:36.458599Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet 29d43f1264edf205d89868b1a4ea664a93ebdb3c0e1e8366995a4c0067172cd4  new [0m
[0;34m node0 2022-08-26T19:00:36.459190Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a fork block hash=2932bc6e5959bad3c17cfa7d62774b6f7ee6d6ac2b85c612177f5ee111833747 (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.459414Z [httpworker.0] [validationinterface.cpp:257] [NewPoWValidBlock] [validation] NewPoWValidBlock: block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 [0m
[0;34m node0 2022-08-26T19:00:36.460272Z [httpworker.0] [validation.cpp:2710] [ConnectTip] [bench]   - Using cached block [0m
[0;34m node0 2022-08-26T19:00:36.460341Z [httpworker.0] [validation.cpp:2717] [ConnectTip] [bench]   - Load block from disk: 0.09ms [0.02s (0.11ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460430Z [httpworker.0] [validation.cpp:2060] [ConnectBlock] [bench]     - Sanity checks: 0.00ms [0.00s (0.01ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460504Z [httpworker.0] [validation.cpp:2159] [ConnectBlock] [bench]     - Fork checks: 0.08ms [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460580Z [httpworker.0] [validation.cpp:2244] [ConnectBlock] [bench]       - Connect 1 transactions: 0.07ms (0.067ms/tx, 0.000ms/txin) [0.03s (0.16ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460648Z [httpworker.0] [validation.cpp:2257] [ConnectBlock] [bench]     - Verify 0 txins: 0.14ms (0.000ms/txin) [0.05s (0.24ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460768Z [httpworker.0] [validation.cpp:2267] [ConnectBlock] [bench]     - Write undo data: 0.12ms [0.02s (0.08ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460820Z [httpworker.0] [validation.cpp:2278] [ConnectBlock] [bench]     - Index writing: 0.06ms [0.02s (0.07ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.460885Z [httpworker.0] [validationinterface.cpp:252] [BlockChecked] [validation] BlockChecked: block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 state=Valid [0m
[0;34m node0 2022-08-26T19:00:36.460971Z [httpworker.0] [validation.cpp:2729] [ConnectTip] [bench]   - Connect total: 0.64ms [0.10s (0.50ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.461025Z [httpworker.0] [validation.cpp:2734] [ConnectTip] [bench]   - Flush: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.461089Z [httpworker.0] [validation.cpp:2740] [ConnectTip] [bench]   - Writing chainstate: 0.06ms [0.01s (0.04ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.461695Z [httpworker.0] [policy/fees.cpp:667] [processBlock] [estimatefee] Blockpolicy estimates updated by 0 of 0 block txs, since last block 0 of 0 tracked, mempool map size 0, max target 0 from current [0m
[0;34m node0 2022-08-26T19:00:36.461818Z [httpworker.0] [validation.cpp:2519] [UpdateTipLog] UpdateTip: new best=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 height=101 version=0x20000000 log2_work=7.672425 tx=102 date='2022-08-26T19:00:53Z' progress=1.000000 cache=0.0MiB(101txo) [0m
[0;34m node0 2022-08-26T19:00:36.461871Z [httpworker.0] [validation.cpp:2751] [ConnectTip] [bench]   - Connect postprocess: 0.78ms [0.09s (0.46ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.461924Z [httpworker.0] [validation.cpp:2752] [ConnectTip] [bench] - Connect block: 1.63ms [0.23s (1.15ms/blk)] [0m
[0;34m node0 2022-08-26T19:00:36.461981Z [httpworker.0] [txmempool.cpp:736] [check] [mempool] Checking mempool with 0 transactions and 0 inputs [0m
[0;34m node0 2022-08-26T19:00:36.462082Z [httpworker.0] [validationinterface.cpp:229] [BlockConnected] [validation] Enqueuing BlockConnected: block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 block height=101 [0m
[0;34m node0 2022-08-26T19:00:36.462181Z [httpworker.0] [validationinterface.cpp:202] [UpdatedBlockTip] [validation] Enqueuing UpdatedBlockTip: new block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 fork block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.463645Z [scheduler] [validationinterface.cpp:229] [operator()] [validation] BlockConnected: block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 block height=101 [0m
[0;34m node0 2022-08-26T19:00:36.464131Z [scheduler] [wallet/wallet.h:827] [WalletLogPrintf] [default wallet] AddToWallet cba15f889ff0a0dbf6c0fe94844fa880ea4d74eb5b77b0c5c3aecdc2b8e7b33f  new [0m
[0;34m node0 2022-08-26T19:00:36.464428Z [scheduler] [validationinterface.cpp:202] [operator()] [validation] UpdatedBlockTip: new block hash=35efc1dfc2855e5a37864dc11cc087e9b95f5c434c3f3aedf3a48d6153864342 fork block hash=35ea0287d190bfff53c66246bafb913efc382575d42915632b8d01f9c229186a (in IBD=false) [0m
[0;34m node0 2022-08-26T19:00:36.464509Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.464765Z [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getbestblockhash user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.465608Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.465784Z [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getrawmempool user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.466872Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:57358 [0m
[0;36m test  2022-08-26T19:00:36.467000Z TestFramework (INFO): Test migration of a basic keys only wallet without balance [0m
[0;34m node0 2022-08-26T19:00:36.467113Z [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=syncwithvalidationinterfacequeue user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.468213Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for / from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.468461Z [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=createwallet user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.468991Z [httpworker.0] [wallet/bdb.cpp:267] [Verify] Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010) [0m
[0;34m node0 2022-08-26T19:00:36.469049Z [httpworker.0] [wallet/bdb.cpp:268] [Verify] Using wallet /tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0/wallet.dat [0m
[0;34m node0 2022-08-26T19:00:36.469292Z [httpworker.0] [wallet/bdb.cpp:146] [Open] BerkeleyEnvironment::Open: LogDir=/tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0/database ErrorFile=/tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0/db.log [0m
[0;34m node0 2022-08-26T19:00:36.538396Z [httpworker.0] [noui.cpp:56] [noui_InitMessage] init message: Loading walletâ¦ [0m
[0;34m node0 2022-08-26T19:00:36.554320Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Wallet file version = 10500, last client version = 239900 [0m
[0;34m node0 2022-08-26T19:00:36.554401Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Keys: 0 plaintext, 0 encrypted, 0 w/ metadata, 0 total. Unknown wallet records: 0 [0m
[0;34m node0 2022-08-26T19:00:36.605591Z [httpworker.0] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool added 2 keys (1 internal), size=2 (1 internal) [0m
[0;34m node0 2022-08-26T19:00:36.610379Z [httpworker.0] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] LegacyScriptPubKeyMan::NewKeyPool rewrote keypool [0m
[0;34m node0 2022-08-26T19:00:36.614592Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Wallet completed loading in              76ms [0m
[0;34m node0 2022-08-26T19:00:36.614955Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] setKeyPool.size() = 2 [0m
[0;34m node0 2022-08-26T19:00:36.615012Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] mapWallet.size() = 0 [0m
[0;34m node0 2022-08-26T19:00:36.615059Z [httpworker.0] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] m_address_book.size() = 0 [0m
[0;34m node0 2022-08-26T19:00:36.616294Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.616515Z [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getwalletinfo user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.618259Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.618435Z [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getwalletinfo user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.619857Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.620303Z [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getnewaddress user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.620786Z [httpworker.3] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool reserve 1 [0m
[0;34m node0 2022-08-26T19:00:36.627344Z [httpworker.3] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool keep 1 [0m
[0;34m node0 2022-08-26T19:00:36.647887Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.648150Z [httpworker.0] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getrawchangeaddress user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.665958Z [httpworker.0] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool added 1 keys (0 internal), size=2 (1 internal) [0m
[0;34m node0 2022-08-26T19:00:36.676696Z [httpworker.0] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool reserve 2 [0m
[0;34m node0 2022-08-26T19:00:36.678752Z [httpworker.0] [wallet/scriptpubkeyman.h:251] [WalletLogPrintf] [basic0] keypool keep 2 [0m
[0;34m node0 2022-08-26T19:00:36.679873Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.680098Z [httpworker.1] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getaddressinfo user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.682643Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.682836Z [httpworker.2] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=getaddressinfo user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.685063Z [http] [httpserver.cpp:241] [http_request_cb] [http] Received a POST request for /wallet/basic0 from 127.0.0.1:57358 [0m
[0;34m node0 2022-08-26T19:00:36.685277Z [httpworker.3] [rpc/request.cpp:179] [parse] [rpc] ThreadRPCServer method=migratewallet user=__cookie__ [0m
[0;34m node0 2022-08-26T19:00:36.697069Z [httpworker.3] [wallet/bdb.cpp:632] [Backup] copied wallet.dat to /tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0/basic0-1661540436.legacy.bak [0m
[0;34m node0 2022-08-26T19:00:36.697200Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Migrating wallet storage database from BerkeleyDB to SQLite. [0m
[0;34m node0 2022-08-26T19:00:36.699251Z [httpworker.3] [wallet/bdb.cpp:538] [Flush] [walletdb] BerkeleyEnvironment::Flush: [/tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0] Flush(true) [0m
[0;34m node0 2022-08-26T19:00:36.699318Z [httpworker.3] [wallet/bdb.cpp:549] [Flush] [walletdb] BerkeleyEnvironment::Flush: Flushing wallet.dat (refcount = 0)... [0m
[0;34m node0 2022-08-26T19:00:36.699483Z [httpworker.3] [wallet/bdb.cpp:553] [Flush] [walletdb] BerkeleyEnvironment::Flush: wallet.dat checkpoint [0m
[0;34m node0 2022-08-26T19:00:36.705707Z [httpworker.3] [wallet/bdb.cpp:555] [Flush] [walletdb] BerkeleyEnvironment::Flush: wallet.dat detach [0m
[0;34m node0 2022-08-26T19:00:36.709394Z [httpworker.3] [wallet/bdb.cpp:558] [Flush] [walletdb] BerkeleyEnvironment::Flush: wallet.dat closed [0m
[0;34m node0 2022-08-26T19:00:36.713614Z [httpworker.3] [wallet/bdb.cpp:564] [Flush] [walletdb] BerkeleyEnvironment::Flush: Flush(true) took              14ms [0m
[0;34m node0 2022-08-26T19:00:36.748739Z [httpworker.3] [wallet/sqlite.cpp:91] [SQLiteDatabase] Using SQLite Version 3.38.5 [0m
[0;34m node0 2022-08-26T19:00:36.748811Z [httpworker.3] [wallet/sqlite.cpp:92] [SQLiteDatabase] Using wallet /tmp/cirrus-ci-build/ci/scratch/test_runner/test_runner_â¿_ð_20220826_185256/wallet_migration_1/node0/regtest/wallets/basic0 [0m
[0;34m node0 2022-08-26T19:00:36.986186Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = ce97f26d06dca87b15676f64ef4b0bbce31a6da61dd92a349d24b2ae74668a90, type = legacy, internal = false [0m
[0;34m node0 2022-08-26T19:00:37.005008Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = de41f410d3c754e57395d424f2c536aee536f66c3c77977d75a4efda90588f76, type = p2sh-segwit, internal = false [0m
[0;34m node0 2022-08-26T19:00:37.028748Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = fe752d918112d09fe05a88ee21aa9655b74226f91c4139440e046bb7d8d11b1e, type = bech32, internal = false [0m
[0;34m node0 2022-08-26T19:00:37.050473Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = 079352270c31a6f0856f42063725e83c3a6d37a91f92c4eca9d24bb03b9f75ac, type = bech32m, internal = false [0m
[0;34m node0 2022-08-26T19:00:37.077234Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = be1d3a17cbc51d4af8dee3baf486d12fc33441268eaf9da7a46cfafe7ba08c97, type = legacy, internal = true [0m
[0;34m node0 2022-08-26T19:00:37.097953Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = 3cdca0745e223d8a786caa129ee6ef4f1426f03650296a96ad7c34992474469e, type = p2sh-segwit, internal = true [0m
[0;34m node0 2022-08-26T19:00:37.116582Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = c5f0166df1d4802d3c1163f22adb1cf8114b8494363a3c7c3083ac6213bf89e8, type = bech32, internal = true [0m
[0;34m node0 2022-08-26T19:00:37.152146Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Setting spkMan to active: id = aac2679e1306d3857c350f196cedcf2e89efe28c824dcfebc14d6aa5d2db626e, type = bech32m, internal = true [0m
[0;34m node0 2022-08-26T19:00:37.152497Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Wallet migration complete. [0m
[0;34m node0 2022-08-26T19:00:37.152619Z [httpworker.3] [wallet/wallet.h:827] [WalletLogPrintf] [basic0] Releasing wallet [0m
[0;36m test  2022-08-26T19:00:37.564000Z TestFramework (ERROR): Unexpected exception caught during testing [0m
[0;36m                                   Traceback (most recent call last):[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 108, in _request[0m
[0;36m                                       return self._get_response()[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 166, in _get_response[0m
[0;36m                                       http_response = self.__conn.getresponse()[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1374, in getresponse[0m
[0;36m                                       response.begin()[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 318, in begin[0m
[0;36m                                       version, status, reason = self._read_status()[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 287, in _read_status[0m
[0;36m                                       raise RemoteDisconnected("Remote end closed connection without"[0m
[0;36m                                   http.client.RemoteDisconnected: Remote end closed connection without response[0m
[0;36m                                   During handling of the above exception, another exception occurred:[0m
[0;36m                                   Traceback (most recent call last):[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_framework.py", line 133, in main[0m
[0;36m                                       self.run_test()[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/wallet_migration.py", line 398, in run_test[0m
[0;36m                                       self.test_basic()[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/wallet_migration.py", line 82, in test_basic[0m
[0;36m                                       basic0.migratewallet()[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/coverage.py", line 49, in __call__[0m
[0;36m                                       return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 142, in __call__[0m
[0;36m                                       response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 113, in _request[0m
[0;36m                                       self.__conn.request(method, path, postdata, headers)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1282, in request[0m
[0;36m                                       self._send_request(method, url, body, headers, encode_chunked)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1328, in _send_request[0m
[0;36m                                       self.endheaders(body, encode_chunked=encode_chunked)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1277, in endheaders[0m
[0;36m                                       self._send_output(message_body, encode_chunked=encode_chunked)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1037, in _send_output[0m
[0;36m                                       self.send(msg)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 975, in send[0m
[0;36m                                       self.connect()[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 941, in connect[0m
[0;36m                                       self.sock = self._create_connection([0m
[0;36m                                     File "/usr/lib/python3.10/socket.py", line 845, in create_connection[0m
[0;36m                                       raise err[0m
[0;36m                                     File "/usr/lib/python3.10/socket.py", line 833, in create_connection[0m
[0;36m                                       sock.connect(sa)[0m
[0;36m                                   ConnectionRefusedError: [Errno 111] Connection refused[0m
[0;36m test  2022-08-26T19:00:37.565000Z TestFramework (DEBUG): Closing down network thread [0m
[0;36m test  2022-08-26T19:00:37.616000Z TestFramework (INFO): Stopping nodes [0m
[0;36m test  2022-08-26T19:00:37.616000Z TestFramework.node0 (DEBUG): Stopping node [0m
[0;36m test  2022-08-26T19:00:37.616000Z TestFramework.node0 (ERROR): Unable to stop node. [0m
[0;36m                                   Traceback (most recent call last):[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/test_node.py", line 336, in stop_node[0m
[0;36m                                       self.stop(wait=wait)[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/coverage.py", line 49, in __call__[0m
[0;36m                                       return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 142, in __call__[0m
[0;36m                                       response, status = self._request('POST', self.__url.path, postdata.encode('utf-8'))[0m
[0;36m                                     File "/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/test/functional/test_framework/authproxy.py", line 107, in _request[0m
[0;36m                                       self.__conn.request(method, path, postdata, headers)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1282, in request[0m
[0;36m                                       self._send_request(method, url, body, headers, encode_chunked)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1293, in _send_request[0m
[0;36m                                       self.putrequest(method, url, **skips)[0m
[0;36m                                     File "/usr/lib/python3.10/http/client.py", line 1119, in putrequest[0m
[0;36m                                       raise CannotSendRequest(self.__state)[0m
[0;36m                                   http.client.CannotSendRequest: Request-sent[0m


[1mTEST                                                   | STATUS    | DURATION

[0m[0;32mexample_test.py                                        | â Passed  | 8 s
[0m[0;32mfeature_abortnode.py                                   | â Passed  | 31 s
[0m[0;32mfeature_addrman.py                                     | â Passed  | 10 s
[0m[0;32mfeature_anchors.py                                     | â Passed  | 3 s
[0m[0;32mfeature_asmap.py                                       | â Passed  | 11 s
[0m[0;32mfeature_assumevalid.py                                 | â Passed  | 89 s
[0m[0;32mfeature_bind_extra.py                                  | â Passed  | 7 s
[0m[0;32mfeature_bip68_sequence.py                              | â Passed  | 44 s
[0m[0;32mfeature_block.py                                       | â Passed  | 186 s
[0m[0;32mfeature_blocksdir.py                                   | â Passed  | 3 s
[0m[0;32mfeature_cltv.py                                        | â Passed  | 3 s
[0m[0;32mfeature_coinstatsindex.py                              | â Passed  | 18 s
[0m[0;32mfeature_csv_activation.py                              | â Passed  | 26 s
[0m[0;32mfeature_dersig.py                                      | â Passed  | 2 s
[0m[0;32mfeature_dirsymlinks.py                                 | â Passed  | 2 s
[0m[0;32mfeature_fee_estimation.py                              | â Passed  | 232 s
[0m[0;32mfeature_filelock.py                                    | â Passed  | 3 s
[0m[0;32mfeature_help.py                                        | â Passed  | 1 s
[0m[0;32mfeature_includeconf.py                                 | â Passed  | 5 s
[0m[0;32mfeature_init.py                                        | â Passed  | 30 s
[0m[0;32mfeature_loadblock.py                                   | â Passed  | 6 s
[0m[0;32mfeature_logging.py                                     | â Passed  | 8 s
[0m[0;32mfeature_maxtipage.py                                   | â Passed  | 43 s
[0m[0;32mfeature_maxuploadtarget.py                             | â Passed  | 66 s
[0m[0;32mfeature_minchainwork.py                                | â Passed  | 13 s
[0m[0;32mfeature_notifications.py                               | â Passed  | 14 s
[0m[0;32mfeature_nulldummy.py                                   | â Passed  | 1 s
[0m[0;32mfeature_presegwit_node_upgrade.py                      | â Passed  | 3 s
[0m[0;32mfeature_proxy.py                                       | â Passed  | 8 s
[0m[0;32mfeature_rbf.py --descriptors                           | â Passed  | 25 s
[0m[0;32mfeature_rbf.py --legacy-wallet                         | â Passed  | 24 s
[0m[0;32mfeature_reindex.py                                     | â Passed  | 5 s
[0m[0;32mfeature_segwit.py --descriptors                        | â Passed  | 19 s
[0m[0;32mfeature_segwit.py --legacy-wallet                      | â Passed  | 48 s
[0m[0;32mfeature_settings.py                                    | â Passed  | 6 s
[0m[0;32mfeature_shutdown.py                                    | â Passed  | 2 s
[0m[0;32mfeature_signet.py                                      | â Passed  | 5 s
[0m[0;32mfeature_startupnotify.py                               | â Passed  | 2 s
[0m[0;32mfeature_taproot.py                                     | â Passed  | 287 s
[0m[0;32mfeature_uacomment.py                                   | â Passed  | 7 s
[0m[0;32mfeature_utxo_set_hash.py                               | â Passed  | 2 s
[0m[0;32mfeature_versionbits_warning.py                         | â Passed  | 7 s
[0m[0;32minterface_bitcoin_cli.py --descriptors                 | â Passed  | 16 s
[0m[0;32minterface_bitcoin_cli.py --legacy-wallet               | â Passed  | 18 s
[0m[0;32minterface_http.py                                      | â Passed  | 1 s
[0m[0;32minterface_rest.py                                      | â Passed  | 6 s
[0m[0;32minterface_rpc.py                                       | â Passed  | 2 s
[0m[0;32minterface_zmq.py                                       | â Passed  | 26 s
[0m[0;32mmempool_accept.py                                      | â Passed  | 9 s
[0m[0;32mmempool_accept_wtxid.py                                | â Passed  | 14 s
[0m[0;32mmempool_datacarrier.py                                 | â Passed  | 2 s
[0m[0;32mmempool_expiry.py                                      | â Passed  | 3 s
[0m[0;32mmempool_limit.py                                       | â Passed  | 8 s
[0m[0;32mmempool_package_limits.py                              | â Passed  | 4 s
[0m[0;32mmempool_package_onemore.py                             | â Passed  | 1 s
[0m[0;32mmempool_packages.py                                    | â Passed  | 16 s
[0m[0;32mmempool_persist.py                                     | â Passed  | 31 s
[0m[0;32mmempool_reorg.py                                       | â Passed  | 5 s
[0m[0;32mmempool_resurrect.py                                   | â Passed  | 6 s
[0m[0;32mmempool_spend_coinbase.py                              | â Passed  | 1 s
[0m[0;32mmempool_unbroadcast.py                                 | â Passed  | 15 s
[0m[0;32mmempool_updatefromblock.py                             | â Passed  | 75 s
[0m[0;32mmining_basic.py                                        | â Passed  | 22 s
[0m[0;32mmining_getblocktemplate_longpoll.py                    | â Passed  | 69 s
[0m[0;32mmining_prioritisetransaction.py                        | â Passed  | 20 s
[0m[0;32mp2p_add_connections.py                                 | â Passed  | 9 s
[0m[0;32mp2p_addr_relay.py                                      | â Passed  | 30 s
[0m[0;32mp2p_addrfetch.py                                       | â Passed  | 3 s
[0m[0;32mp2p_addrv2_relay.py                                    | â Passed  | 1 s
[0m[0;32mp2p_block_sync.py                                      | â Passed  | 2 s
[0m[0;32mp2p_blocksonly.py                                      | â Passed  | 18 s
[0m[0;32mp2p_compactblocks.py                                   | â Passed  | 11 s
[0m[0;32mp2p_compactblocks_blocksonly.py                        | â Passed  | 2 s
[0m[0;32mp2p_compactblocks_hb.py                                | â Passed  | 21 s
[0m[0;32mp2p_disconnect_ban.py                                  | â Passed  | 2 s
[0m[0;32mp2p_dns_seeds.py                                       | â Passed  | 37 s
[0m[0;32mp2p_dos_header_tree.py                                 | â Passed  | 5 s
[0m[0;32mp2p_eviction.py                                        | â Passed  | 6 s
[0m[0;32mp2p_feefilter.py                                       | â Passed  | 31 s
[0m[0;32mp2p_filter.py                                          | â Passed  | 9 s
[0m[0;32mp2p_fingerprint.py                                     | â Passed  | 2 s
[0m[0;32mp2p_getaddr_caching.py                                 | â Passed  | 40 s
[0m[0;32mp2p_getdata.py                                         | â Passed  | 3 s
[0m[0;32mp2p_initial_headers_sync.py                            | â Passed  | 3 s
[0m[0;32mp2p_invalid_block.py                                   | â Passed  | 3 s
[0m[0;32mp2p_invalid_locator.py                                 | â Passed  | 4 s
[0m[0;32mp2p_invalid_messages.py                                | â Passed  | 19 s
[0m[0;32mp2p_invalid_tx.py                                      | â Passed  | 10 s
[0m[0;32mp2p_leak.py                                            | â Passed  | 7 s
[0m[0;32mp2p_leak_tx.py                                         | â Passed  | 2 s
[0m[0;32mp2p_message_capture.py                                 | â Passed  | 2 s
[0m[0;32mp2p_nobloomfilter_messages.py                          | â Passed  | 3 s
[0m[0;32mp2p_permissions.py                                     | â Passed  | 21 s
[0m[0;32mp2p_ping.py                                            | â Passed  | 2 s
[0m[0;32mp2p_segwit.py                                          | â Passed  | 99 s
[0m[0;32mp2p_sendheaders.py                                     | â Passed  | 18 s
[0m[0;32mp2p_timeouts.py                                        | â Passed  | 1 s
[0m[0;32mp2p_tx_download.py                                     | â Passed  | 38 s
[0m[0;32mp2p_unrequested_blocks.py                              | â Passed  | 14 s
[0m[0;32mrpc_bind.py --ipv4                                     | â Passed  | 2 s
[0m[0;32mrpc_bind.py --nonloopback                              | â Passed  | 33 s
[0m[0;32mrpc_blockchain.py                                      | â Passed  | 55 s
[0m[0;32mrpc_createmultisig.py                                  | â Passed  | 32 s
[0m[0;32mrpc_decodescript.py                                    | â Passed  | 1 s
[0m[0;32mrpc_deprecated.py                                      | â Passed  | 1 s
[0m[0;32mrpc_deriveaddresses.py                                 | â Passed  | 2 s
[0m[0;32mrpc_deriveaddresses.py --usecli                        | â Passed  | 2 s
[0m[0;32mrpc_dumptxoutset.py                                    | â Passed  | 2 s
[0m[0;32mrpc_estimatefee.py                                     | â Passed  | 1 s
[0m[0;32mrpc_fundrawtransaction.py --descriptors                | â Passed  | 41 s
[0m[0;32mrpc_fundrawtransaction.py --legacy-wallet              | â Passed  | 63 s
[0m[0;32mrpc_generate.py                                        | â Passed  | 2 s
[0m[0;32mrpc_getblockfilter.py                                  | â Passed  | 2 s
[0m[0;32mrpc_getblockfrompeer.py                                | â Passed  | 2 s
[0m[0;32mrpc_getblockstats.py                                   | â Passed  | 2 s
[0m[0;32mrpc_getchaintips.py                                    | â Passed  | 5 s
[0m[0;32mrpc_getdescriptorinfo.py                               | â Passed  | 1 s
[0m[0;32mrpc_help.py                                            | â Passed  | 3 s
[0m[0;32mrpc_invalid_address_message.py                         | â Passed  | 4 s
[0m[0;32mrpc_invalidateblock.py                                 | â Passed  | 1 s
[0m[0;32mrpc_mempool_info.py                                    | â Passed  | 1 s
[0m[0;32mrpc_misc.py                                            | â Passed  | 7 s
[0m[0;32mrpc_named_arguments.py                                 | â Passed  | 1 s
[0m[0;32mrpc_net.py                                             | â Passed  | 36 s
[0m[0;32mrpc_packages.py                                        | â Passed  | 26 s
[0m[0;32mrpc_preciousblock.py                                   | â Passed  | 2 s
[0m[0;32mrpc_psbt.py --descriptors                              | â Passed  | 47 s
[0m[0;32mrpc_psbt.py --legacy-wallet                            | â Passed  | 75 s
[0m[0;32mrpc_rawtransaction.py --legacy-wallet                  | â Passed  | 19 s
[0m[0;32mrpc_scantxoutset.py                                    | â Passed  | 13 s
[0m[0;32mrpc_setban.py                                          | â Passed  | 16 s
[0m[0;32mrpc_signer.py                                          | â Passed  | 1 s
[0m[0;32mrpc_signmessagewithprivkey.py                          | â Passed  | 1 s
[0m[0;32mrpc_signrawtransactionwithkey.py                       | â Passed  | 5 s
[0m[0;32mrpc_txoutproof.py                                      | â Passed  | 5 s
[0m[0;32mrpc_uptime.py                                          | â Passed  | 1 s
[0m[0;32mrpc_users.py                                           | â Passed  | 10 s
[0m[0;32mrpc_whitelist.py                                       | â Passed  | 3 s
[0m[0;32mtool_signet_miner.py --descriptors                     | â Passed  | 2 s
[0m[0;32mtool_signet_miner.py --legacy-wallet                   | â Passed  | 3 s
[0m[0;32mtool_wallet.py --descriptors                           | â Passed  | 11 s
[0m[0;32mtool_wallet.py --legacy-wallet                         | â Passed  | 15 s
[0m[0;32mwallet_abandonconflict.py --descriptors                | â Passed  | 12 s
[0m[0;32mwallet_abandonconflict.py --legacy-wallet              | â Passed  | 8 s
[0m[0;32mwallet_address_types.py --descriptors                  | â Passed  | 27 s
[0m[0;32mwallet_address_types.py --legacy-wallet                | â Passed  | 55 s
[0m[0;32mwallet_avoid_mixing_output_types.py --descriptors      | â Passed  | 19 s
[0m[0;32mwallet_avoidreuse.py --descriptors                     | â Passed  | 66 s
[0m[0;32mwallet_avoidreuse.py --legacy-wallet                   | â Passed  | 127 s
[0m[0;32mwallet_backup.py --descriptors                         | â Passed  | 39 s
[0m[0;32mwallet_backup.py --legacy-wallet                       | â Passed  | 41 s
[0m[0;32mwallet_balance.py --descriptors                        | â Passed  | 10 s
[0m[0;32mwallet_balance.py --legacy-wallet                      | â Passed  | 9 s
[0m[0;32mwallet_basic.py --descriptors                          | â Passed  | 43 s
[0m[0;32mwallet_basic.py --legacy-wallet                        | â Passed  | 50 s
[0m[0;32mwallet_bumpfee.py --descriptors                        | â Passed  | 53 s
[0m[0;32mwallet_bumpfee.py --legacy-wallet                      | â Passed  | 49 s
[0m[0;32mwallet_coinbase_category.py --descriptors              | â Passed  | 3 s
[0m[0;32mwallet_coinbase_category.py --legacy-wallet            | â Passed  | 3 s
[0m[0;32mwallet_create_tx.py --descriptors                      | â Passed  | 14 s
[0m[0;32mwallet_create_tx.py --legacy-wallet                    | â Passed  | 21 s
[0m[0;32mwallet_createwallet.py --descriptors                   | â Passed  | 7 s
[0m[0;32mwallet_createwallet.py --legacy-wallet                 | â Passed  | 20 s
[0m[0;32mwallet_createwallet.py --usecli                        | â Passed  | 19 s
[0m[0;32mwallet_crosschain.py                                   | â Passed  | 3 s
[0m[0;32mwallet_descriptor.py --descriptors                     | â Passed  | 21 s
[0m[0;32mwallet_disable.py                                      | â Passed  | 1 s
[0m[0;32mwallet_dump.py --legacy-wallet                         | â Passed  | 7 s
[0m[0;32mwallet_encryption.py --descriptors                     | â Passed  | 6 s
[0m[0;32mwallet_encryption.py --legacy-wallet                   | â Passed  | 7 s
[0m[0;32mwallet_fallbackfee.py --descriptors                    | â Passed  | 3 s
[0m[0;32mwallet_fallbackfee.py --legacy-wallet                  | â Passed  | 4 s
[0m[0;32mwallet_groups.py --descriptors                         | â Passed  | 45 s
[0m[0;32mwallet_groups.py --legacy-wallet                       | â Passed  | 49 s
[0m[0;32mwallet_hd.py --descriptors                             | â Passed  | 14 s
[0m[0;32mwallet_hd.py --legacy-wallet                           | â Passed  | 20 s
[0m[0;32mwallet_implicitsegwit.py --legacy-wallet               | â Passed  | 7 s
[0m[0;32mwallet_import_with_label.py --legacy-wallet            | â Passed  | 2 s
[0m[0;32mwallet_importdescriptors.py --descriptors              | â Passed  | 24 s
[0m[0;32mwallet_importmulti.py --legacy-wallet                  | â Passed  | 13 s
[0m[0;32mwallet_importprunedfunds.py --descriptors              | â Passed  | 4 s
[0m[0;32mwallet_importprunedfunds.py --legacy-wallet            | â Passed  | 5 s
[0m[0;32mwallet_keypool.py --descriptors                        | â Passed  | 6 s
[0m[0;32mwallet_keypool.py --legacy-wallet                      | â Passed  | 11 s
[0m[0;32mwallet_keypool_topup.py --descriptors                  | â Passed  | 22 s
[0m[0;32mwallet_keypool_topup.py --legacy-wallet                | â Passed  | 37 s
[0m[0;32mwallet_labels.py --descriptors                         | â Passed  | 4 s
[0m[0;32mwallet_labels.py --legacy-wallet                       | â Passed  | 5 s
[0m[0;32mwallet_listdescriptors.py --descriptors                | â Passed  | 2 s
[0m[0;32mwallet_listreceivedby.py --descriptors                 | â Passed  | 9 s
[0m[0;32mwallet_listreceivedby.py --legacy-wallet               | â Passed  | 8 s
[0m[0;32mwallet_listsinceblock.py --descriptors                 | â Passed  | 14 s
[0m[0;32mwallet_listsinceblock.py --legacy-wallet               | â Passed  | 17 s
[0m[0;32mwallet_listtransactions.py --descriptors               | â Passed  | 20 s
[0m[0;32mwallet_listtransactions.py --legacy-wallet             | â Passed  | 25 s
[0m[0;32mwallet_miniscript.py                                   | â Passed  | 5 s
[0m[0;32mwallet_multisig_descriptor_psbt.py                     | â Passed  | 9 s
[0m[0;32mwallet_multiwallet.py --descriptors                    | â Passed  | 53 s
[0m[0;32mwallet_multiwallet.py --legacy-wallet                  | â Passed  | 69 s
[0m[0;32mwallet_multiwallet.py --usecli                         | â Passed  | 46 s
[0m[0;32mwallet_orphanedreward.py                               | â Passed  | 17 s
[0m[0;32mwallet_reorgsrestore.py                                | â Passed  | 6 s
[0m[0;32mwallet_resendwallettransactions.py --descriptors       | â Passed  | 4 s
[0m[0;32mwallet_resendwallettransactions.py --legacy-wallet     | â Passed  | 5 s
[0m[0;32mwallet_send.py --descriptors                           | â Passed  | 16 s
[0m[0;32mwallet_send.py --legacy-wallet                         | â Passed  | 22 s
[0m[0;32mwallet_sendall.py --descriptors                        | â Passed  | 5 s
[0m[0;32mwallet_sendall.py --legacy-wallet                      | â Passed  | 7 s
[0m[0;32mwallet_signer.py --descriptors                         | â Passed  | 4 s
[0m[0;32mwallet_signmessagewithaddress.py                       | â Passed  | 1 s
[0m[0;32mwallet_signrawtransactionwithwallet.py --descriptors   | â Passed  | 6 s
[0m[0;32mwallet_signrawtransactionwithwallet.py --legacy-wallet | â Passed  | 8 s
[0m[0;32mwallet_simulaterawtx.py --descriptors                  | â Passed  | 2 s
[0m[0;32mwallet_simulaterawtx.py --legacy-wallet                | â Passed  | 3 s
[0m[0;32mwallet_startup.py                                      | â Passed  | 9 s
[0m[0;32mwallet_timelock.py                                     | â Passed  | 2 s
[0m[0;32mwallet_transactiontime_rescan.py --descriptors         | â Passed  | 18 s
[0m[0;32mwallet_transactiontime_rescan.py --legacy-wallet       | â Passed  | 18 s
[0m[0;32mwallet_txn_clone.py                                    | â Passed  | 4 s
[0m[0;32mwallet_txn_clone.py --mineblock                        | â Passed  | 4 s
[0m[0;32mwallet_txn_clone.py --segwit                           | â Passed  | 3 s
[0m[0;32mwallet_txn_doublespend.py --descriptors                | â Passed  | 3 s
[0m[0;32mwallet_txn_doublespend.py --legacy-wallet              | â Passed  | 6 s
[0m[0;32mwallet_txn_doublespend.py --mineblock                  | â Passed  | 4 s
[0m[0;32mwallet_watchonly.py --legacy-wallet                    | â Passed  | 3 s
[0m[0;32mwallet_watchonly.py --usecli --legacy-wallet           | â Passed  | 3 s
[0m[0mfeature_backwards_compatibility.py --descriptors       | â Skipped | 0 s
[0m[0mfeature_backwards_compatibility.py --legacy-wallet     | â Skipped | 0 s
[0m[0mfeature_bind_port_discover.py                          | â Skipped | 0 s
[0m[0mfeature_bind_port_externalip.py                        | â Skipped | 0 s
[0m[0mfeature_syscall_sandbox.py                             | â Skipped | 0 s
[0m[0mfeature_txindex_compatibility.py                       | â Skipped | 0 s
[0m[0mfeature_unsupported_utxo_db.py                         | â Skipped | 0 s
[0m[0minterface_usdt_coinselection.py                        | â Skipped | 0 s
[0m[0minterface_usdt_net.py                                  | â Skipped | 1 s
[0m[0minterface_usdt_utxocache.py                            | â Skipped | 1 s
[0m[0minterface_usdt_validation.py                           | â Skipped | 1 s
[0m[0mmempool_compatibility.py                               | â Skipped | 0 s
[0m[0mrpc_bind.py --ipv6                                     | â Skipped | 0 s
[0m[0mwallet_inactive_hdchains.py                            | â Skipped | 0 s
[0m[0mwallet_upgradewallet.py --legacy-wallet                | â Skipped | 0 s
[0m[0;31mwallet_migration.py                                    | â Failed  | 3 s
[0m[0;31m[1m
ALL                                                    | â Failed  | 4201 s (accumulated) 
[0m[0mRuntime: 455 s

==================
WARNING: ThreadSanitizer: destroy of a locked mutex (pid=50808)
    #0 pthread_mutex_destroy <null> (bitcoind+0xd2568)
    #1 AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin() src/./sync.h:97:5 (bitcoind+0x679d85)
    #2 wallet::CWallet::~CWallet() src/./wallet/wallet.h:385:5 (bitcoind+0x679d85)
    #3 wallet::ReleaseWallet(wallet::CWallet*) src/wallet/wallet.cpp:195:5 (bitcoind+0x66365f)
    #4 std::__1::__shared_ptr_pointer<wallet::CWallet*, void (*)(wallet::CWallet*), std::__1::allocator<wallet::CWallet> >::__on_zero_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:267:5 (bitcoind+0x68b3a7)
    #5 std::__1::__shared_count::__release_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:177:9 (bitcoind+0x641861)
    #6 std::__1::__shared_weak_count::__release_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:219:27 (bitcoind+0x641861)
    #7 std::__1::shared_ptr<wallet::CWallet>::~shared_ptr() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:959:19 (bitcoind+0x641861)
    #8 std::__1::shared_ptr<wallet::CWallet>::reset() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:1054:5 (bitcoind+0x641861)
    #9 wallet::UnloadWallet(std::__1::shared_ptr<wallet::CWallet>&&) src/wallet/wallet.cpp:222:12 (bitcoind+0x641861)
    #10 wallet::MigrateLegacyToDescriptor(std::__1::shared_ptr<wallet::CWallet>&&, wallet::WalletContext&) src/wallet/wallet.cpp:4059:9 (bitcoind+0x66e26e)
    #11 wallet::migratewallet()::$_10::operator()(RPCHelpMan const&, JSONRPCRequest const&) const src/wallet/rpc/wallet.cpp:737:41 (bitcoind+0x5d7b95)
    #12 decltype(static_cast<wallet::migratewallet()::$_10&>(fp)(static_cast<RPCHelpMan const&>(fp0), static_cast<JSONRPCRequest const&>(fp0))) std::__1::__invoke<wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x5d7b95)
    #13 UniValue std::__1::__invoke_void_return_wrapper<UniValue, false>::__call<wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x5d7b95)
    #14 std::__1::__function::__alloc_func<wallet::migratewallet()::$_10, std::__1::allocator<wallet::migratewallet()::$_10>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x5d7b95)
    #15 std::__1::__function::__func<wallet::migratewallet()::$_10, std::__1::allocator<wallet::migratewallet()::$_10>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x5d7b95)
    #16 std::__1::__function::__value_func<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x852f8f)
    #17 std::__1::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x852f8f)
    #18 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const src/rpc/util.cpp:584:26 (bitcoind+0x852f8f)
    #19 CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/./rpc/server.h:109:91 (bitcoind+0x32ad37)
    #20 decltype(static_cast<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x32ad37)
    #21 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x32ad37)
    #22 std::__1::__function::__alloc_func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x32ad37)
    #23 std::__1::__function::__func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x32ad37)
    #24 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x596272)
    #25 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x596272)
    #26 wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/wallet/interfaces.cpp:541:24 (bitcoind+0x596272)
    #27 decltype(static_cast<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x596272)
    #28 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x596272)
    #29 std::__1::__function::__alloc_func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x596272)
    #30 std::__1::__function::__func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x596272)
    #31 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x2b0426)
    #32 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x2b0426)
    #33 node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/node/interfaces.cpp:470:24 (bitcoind+0x2b0426)
    #34 decltype(static_cast<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x2b0426)
    #35 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x2b0426)
    #36 std::__1::__function::__alloc_func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x2b0426)
    #37 std::__1::__function::__func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x2b0426)
    #38 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x41b213)
    #39 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x41b213)
    #40 ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) src/rpc/server.cpp:476:20 (bitcoind+0x41b213)
    #41 ExecuteCommands(std::__1::vector<CRPCCommand const*, std::__1::allocator<CRPCCommand const*> > const&, JSONRPCRequest const&, UniValue&) src/rpc/server.cpp:442:13 (bitcoind+0x41b213)
    #42 CRPCTable::execute(JSONRPCRequest const&) const src/rpc/server.cpp:462:13 (bitcoind+0x41a810)
    #43 HTTPReq_JSONRPC(std::__1::any const&, HTTPRequest*) src/httprpc.cpp:201:40 (bitcoind+0x538e96)
    #44 StartHTTPRPC(std::__1::any const&)::$_0::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const src/httprpc.cpp:300:80 (bitcoind+0x538e96)
    #45 decltype(static_cast<StartHTTPRPC(std::__1::any const&)::$_0&>(fp)(static_cast<HTTPRequest*>(fp0), static_cast<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x538e96)
    #46 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x538e96)
    #47 std::__1::__function::__alloc_func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x538e96)
    #48 std::__1::__function::__func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x538e96)
    #49 std::__1::__function::__value_func<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x547960)
    #50 std::__1::function<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x547960)
    #51 HTTPWorkItem::operator()() src/httpserver.cpp:56:9 (bitcoind+0x547960)
    #52 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111:13 (bitcoind+0x54a1a3)
    #53 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) src/httpserver.cpp:341:12 (bitcoind+0x541c7a)
    #54 decltype(static_cast<void (*>(fp)(static_cast<WorkQueue<HTTPClosure>*>(fp0), static_cast<int>(fp0))) std::__1::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x54ae15)
    #55 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-13/bin/../include/c++/v1/thread:280:5 (bitcoind+0x54ae15)
    #56 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) /usr/lib/llvm-13/bin/../include/c++/v1/thread:291:5 (bitcoind+0x54ae15)

  and:
    #0 pthread_mutex_destroy <null> (bitcoind+0xd2568)
    #1 AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin() src/./sync.h:97:5 (bitcoind+0x679d85)
    #2 wallet::CWallet::~CWallet() src/./wallet/wallet.h:385:5 (bitcoind+0x679d85)
    #3 wallet::ReleaseWallet(wallet::CWallet*) src/wallet/wallet.cpp:195:5 (bitcoind+0x66365f)
    #4 std::__1::__shared_ptr_pointer<wallet::CWallet*, void (*)(wallet::CWallet*), std::__1::allocator<wallet::CWallet> >::__on_zero_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:267:5 (bitcoind+0x68b3a7)
    #5 std::__1::__shared_count::__release_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:177:9 (bitcoind+0x641861)
    #6 std::__1::__shared_weak_count::__release_shared() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:219:27 (bitcoind+0x641861)
    #7 std::__1::shared_ptr<wallet::CWallet>::~shared_ptr() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:959:19 (bitcoind+0x641861)
    #8 std::__1::shared_ptr<wallet::CWallet>::reset() /usr/lib/llvm-13/bin/../include/c++/v1/__memory/shared_ptr.h:1054:5 (bitcoind+0x641861)
    #9 wallet::UnloadWallet(std::__1::shared_ptr<wallet::CWallet>&&) src/wallet/wallet.cpp:222:12 (bitcoind+0x641861)
    #10 wallet::MigrateLegacyToDescriptor(std::__1::shared_ptr<wallet::CWallet>&&, wallet::WalletContext&) src/wallet/wallet.cpp:4059:9 (bitcoind+0x66e26e)
    #11 wallet::migratewallet()::$_10::operator()(RPCHelpMan const&, JSONRPCRequest const&) const src/wallet/rpc/wallet.cpp:737:41 (bitcoind+0x5d7b95)
    #12 decltype(static_cast<wallet::migratewallet()::$_10&>(fp)(static_cast<RPCHelpMan const&>(fp0), static_cast<JSONRPCRequest const&>(fp0))) std::__1::__invoke<wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x5d7b95)
    #13 UniValue std::__1::__invoke_void_return_wrapper<UniValue, false>::__call<wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::migratewallet()::$_10&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x5d7b95)
    #14 std::__1::__function::__alloc_func<wallet::migratewallet()::$_10, std::__1::allocator<wallet::migratewallet()::$_10>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x5d7b95)
    #15 std::__1::__function::__func<wallet::migratewallet()::$_10, std::__1::allocator<wallet::migratewallet()::$_10>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x5d7b95)
    #16 std::__1::__function::__value_func<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x852f8f)
    #17 std::__1::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x852f8f)
    #18 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const src/rpc/util.cpp:584:26 (bitcoind+0x852f8f)
    #19 CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/./rpc/server.h:109:91 (bitcoind+0x32ad37)
    #20 decltype(static_cast<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x32ad37)
    #21 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x32ad37)
    #22 std::__1::__function::__alloc_func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x32ad37)
    #23 std::__1::__function::__func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x32ad37)
    #24 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x596272)
    #25 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x596272)
    #26 wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/wallet/interfaces.cpp:541:24 (bitcoind+0x596272)
    #27 decltype(static_cast<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x596272)
    #28 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x596272)
    #29 std::__1::__function::__alloc_func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x596272)
    #30 std::__1::__function::__func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x596272)
    #31 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x2b0426)
    #32 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x2b0426)
    #33 node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/node/interfaces.cpp:470:24 (bitcoind+0x2b0426)
    #34 decltype(static_cast<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x2b0426)
    #35 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x2b0426)
    #36 std::__1::__function::__alloc_func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x2b0426)
    #37 std::__1::__function::__func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x2b0426)
    #38 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x41b213)
    #39 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x41b213)
    #40 ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) src/rpc/server.cpp:476:20 (bitcoind+0x41b213)
    #41 ExecuteCommands(std::__1::vector<CRPCCommand const*, std::__1::allocator<CRPCCommand const*> > const&, JSONRPCRequest const&, UniValue&) src/rpc/server.cpp:442:13 (bitcoind+0x41b213)
    #42 CRPCTable::execute(JSONRPCRequest const&) const src/rpc/server.cpp:462:13 (bitcoind+0x41a810)
    #43 HTTPReq_JSONRPC(std::__1::any const&, HTTPRequest*) src/httprpc.cpp:201:40 (bitcoind+0x538e96)
    #44 StartHTTPRPC(std::__1::any const&)::$_0::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const src/httprpc.cpp:300:80 (bitcoind+0x538e96)
    #45 decltype(static_cast<StartHTTPRPC(std::__1::any const&)::$_0&>(fp)(static_cast<HTTPRequest*>(fp0), static_cast<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x538e96)
    #46 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x538e96)
    #47 std::__1::__function::__alloc_func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x538e96)
    #48 std::__1::__function::__func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x538e96)
    #49 std::__1::__function::__value_func<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x547960)
    #50 std::__1::function<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x547960)
    #51 HTTPWorkItem::operator()() src/httpserver.cpp:56:9 (bitcoind+0x547960)
    #52 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111:13 (bitcoind+0x54a1a3)
    #53 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) src/httpserver.cpp:341:12 (bitcoind+0x541c7a)
    #54 decltype(static_cast<void (*>(fp)(static_cast<WorkQueue<HTTPClosure>*>(fp0), static_cast<int>(fp0))) std::__1::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x54ae15)
    #55 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-13/bin/../include/c++/v1/thread:280:5 (bitcoind+0x54ae15)
    #56 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) /usr/lib/llvm-13/bin/../include/c++/v1/thread:291:5 (bitcoind+0x54ae15)

  Location is heap block of size 840 at 0x7b5c00030200 allocated by thread T18:
    #0 operator new(unsigned long) <null> (bitcoind+0x145d38)
    #1 wallet::CWallet::Create(wallet::WalletContext&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::unique_ptr<wallet::WalletDatabase, std::__1::default_delete<wallet::WalletDatabase> >, unsigned long, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) src/wallet/wallet.cpp:2793:51 (bitcoind+0x644eeb)
    #2 wallet::CreateWallet(wallet::WalletContext&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::optional<bool>, wallet::DatabaseOptions&, wallet::DatabaseStatus&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) src/wallet/wallet.cpp:324:45 (bitcoind+0x6432ed)
    #3 wallet::createwallet()::$_6::operator()(RPCHelpMan const&, JSONRPCRequest const&) const src/wallet/rpc/wallet.cpp:392:45 (bitcoind+0x5cc655)
    #4 decltype(static_cast<wallet::createwallet()::$_6&>(fp)(static_cast<RPCHelpMan const&>(fp0), static_cast<JSONRPCRequest const&>(fp0))) std::__1::__invoke<wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x5cc655)
    #5 UniValue std::__1::__invoke_void_return_wrapper<UniValue, false>::__call<wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x5cc655)
    #6 std::__1::__function::__alloc_func<wallet::createwallet()::$_6, std::__1::allocator<wallet::createwallet()::$_6>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x5cc655)
    #7 std::__1::__function::__func<wallet::createwallet()::$_6, std::__1::allocator<wallet::createwallet()::$_6>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x5cc655)
    #8 std::__1::__function::__value_func<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x852f8f)
    #9 std::__1::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x852f8f)
    #10 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const src/rpc/util.cpp:584:26 (bitcoind+0x852f8f)
    #11 CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/./rpc/server.h:109:91 (bitcoind+0x32ad37)
    #12 decltype(static_cast<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x32ad37)
    #13 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x32ad37)
    #14 std::__1::__function::__alloc_func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x32ad37)
    #15 std::__1::__function::__func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x32ad37)
    #16 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x596272)
    #17 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x596272)
    #18 wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/wallet/interfaces.cpp:541:24 (bitcoind+0x596272)
    #19 decltype(static_cast<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x596272)
    #20 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x596272)
    #21 std::__1::__function::__alloc_func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x596272)
    #22 std::__1::__function::__func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x596272)
    #23 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x2b0426)
    #24 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x2b0426)
    #25 node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/node/interfaces.cpp:470:24 (bitcoind+0x2b0426)
    #26 decltype(static_cast<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x2b0426)
    #27 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x2b0426)
    #28 std::__1::__function::__alloc_func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x2b0426)
    #29 std::__1::__function::__func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x2b0426)
    #30 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x41ab9c)
    #31 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x41ab9c)
    #32 ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) src/rpc/server.cpp:478:20 (bitcoind+0x41ab9c)
    #33 ExecuteCommands(std::__1::vector<CRPCCommand const*, std::__1::allocator<CRPCCommand const*> > const&, JSONRPCRequest const&, UniValue&) src/rpc/server.cpp:442:13 (bitcoind+0x41ab9c)
    #34 CRPCTable::execute(JSONRPCRequest const&) const src/rpc/server.cpp:462:13 (bitcoind+0x41a810)
    #35 HTTPReq_JSONRPC(std::__1::any const&, HTTPRequest*) src/httprpc.cpp:201:40 (bitcoind+0x538e96)
    #36 StartHTTPRPC(std::__1::any const&)::$_0::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const src/httprpc.cpp:300:80 (bitcoind+0x538e96)
    #37 decltype(static_cast<StartHTTPRPC(std::__1::any const&)::$_0&>(fp)(static_cast<HTTPRequest*>(fp0), static_cast<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x538e96)
    #38 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x538e96)
    #39 std::__1::__function::__alloc_func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x538e96)
    #40 std::__1::__function::__func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x538e96)
    #41 std::__1::__function::__value_func<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x547960)
    #42 std::__1::function<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x547960)
    #43 HTTPWorkItem::operator()() src/httpserver.cpp:56:9 (bitcoind+0x547960)
    #44 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111:13 (bitcoind+0x54a1a3)
    #45 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) src/httpserver.cpp:341:12 (bitcoind+0x541c7a)
    #46 decltype(static_cast<void (*>(fp)(static_cast<WorkQueue<HTTPClosure>*>(fp0), static_cast<int>(fp0))) std::__1::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x54ae15)
    #47 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-13/bin/../include/c++/v1/thread:280:5 (bitcoind+0x54ae15)
    #48 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) /usr/lib/llvm-13/bin/../include/c++/v1/thread:291:5 (bitcoind+0x54ae15)

  Mutex M133489 (0x7b5c00030340) created at:
    #0 pthread_mutex_init <null> (bitcoind+0xd23ff)
    #1 std::__1::recursive_mutex::recursive_mutex() <null> (libc++.so.1+0x49fb3)
    #2 wallet::CWallet::Create(wallet::WalletContext&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::unique_ptr<wallet::WalletDatabase, std::__1::default_delete<wallet::WalletDatabase> >, unsigned long, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) src/wallet/wallet.cpp:2793:55 (bitcoind+0x644f2f)
    #3 wallet::CreateWallet(wallet::WalletContext&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::optional<bool>, wallet::DatabaseOptions&, wallet::DatabaseStatus&, bilingual_str&, std::__1::vector<bilingual_str, std::__1::allocator<bilingual_str> >&) src/wallet/wallet.cpp:324:45 (bitcoind+0x6432ed)
    #4 wallet::createwallet()::$_6::operator()(RPCHelpMan const&, JSONRPCRequest const&) const src/wallet/rpc/wallet.cpp:392:45 (bitcoind+0x5cc655)
    #5 decltype(static_cast<wallet::createwallet()::$_6&>(fp)(static_cast<RPCHelpMan const&>(fp0), static_cast<JSONRPCRequest const&>(fp0))) std::__1::__invoke<wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x5cc655)
    #6 UniValue std::__1::__invoke_void_return_wrapper<UniValue, false>::__call<wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&>(wallet::createwallet()::$_6&, RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x5cc655)
    #7 std::__1::__function::__alloc_func<wallet::createwallet()::$_6, std::__1::allocator<wallet::createwallet()::$_6>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x5cc655)
    #8 std::__1::__function::__func<wallet::createwallet()::$_6, std::__1::allocator<wallet::createwallet()::$_6>, UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x5cc655)
    #9 std::__1::__function::__value_func<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x852f8f)
    #10 std::__1::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x852f8f)
    #11 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const src/rpc/util.cpp:584:26 (bitcoind+0x852f8f)
    #12 CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/./rpc/server.h:109:91 (bitcoind+0x32ad37)
    #13 decltype(static_cast<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x32ad37)
    #14 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x32ad37)
    #15 std::__1::__function::__alloc_func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x32ad37)
    #16 std::__1::__function::__func<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<CRPCCommand::CRPCCommand(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, RPCHelpMan (*)())::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x32ad37)
    #17 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x596272)
    #18 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x596272)
    #19 wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/wallet/interfaces.cpp:541:24 (bitcoind+0x596272)
    #20 decltype(static_cast<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x596272)
    #21 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x596272)
    #22 std::__1::__function::__alloc_func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x596272)
    #23 std::__1::__function::__func<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x596272)
    #24 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x2b0426)
    #25 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x2b0426)
    #26 node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)::operator()(JSONRPCRequest const&, UniValue&, bool) const src/node/interfaces.cpp:470:24 (bitcoind+0x2b0426)
    #27 decltype(static_cast<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&>(fp)(static_cast<JSONRPCRequest const&>(fp0), static_cast<UniValue&>(fp0), static_cast<bool>(fp0))) std::__1::__invoke<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x2b0426)
    #28 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool>(node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)&, JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x2b0426)
    #29 std::__1::__function::__alloc_func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x2b0426)
    #30 std::__1::__function::__func<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool), std::__1::allocator<node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::'lambda'(JSONRPCRequest const&, UniValue&, bool)>, bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x2b0426)
    #31 std::__1::__function::__value_func<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool&&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x41ab9c)
    #32 std::__1::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x41ab9c)
    #33 ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) src/rpc/server.cpp:478:20 (bitcoind+0x41ab9c)
    #34 ExecuteCommands(std::__1::vector<CRPCCommand const*, std::__1::allocator<CRPCCommand const*> > const&, JSONRPCRequest const&, UniValue&) src/rpc/server.cpp:442:13 (bitcoind+0x41ab9c)
    #35 CRPCTable::execute(JSONRPCRequest const&) const src/rpc/server.cpp:462:13 (bitcoind+0x41a810)
    #36 HTTPReq_JSONRPC(std::__1::any const&, HTTPRequest*) src/httprpc.cpp:201:40 (bitcoind+0x538e96)
    #37 StartHTTPRPC(std::__1::any const&)::$_0::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const src/httprpc.cpp:300:80 (bitcoind+0x538e96)
    #38 decltype(static_cast<StartHTTPRPC(std::__1::any const&)::$_0&>(fp)(static_cast<HTTPRequest*>(fp0), static_cast<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(fp0))) std::__1::__invoke<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x538e96)
    #39 bool std::__1::__invoke_void_return_wrapper<bool, false>::__call<StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&>(StartHTTPRPC(std::__1::any const&)::$_0&, HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/invoke.h:30:16 (bitcoind+0x538e96)
    #40 std::__1::__function::__alloc_func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:171:16 (bitcoind+0x538e96)
    #41 std::__1::__function::__func<StartHTTPRPC(std::__1::any const&)::$_0, std::__1::allocator<StartHTTPRPC(std::__1::any const&)::$_0>, bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:345:12 (bitcoind+0x538e96)
    #42 std::__1::__function::__value_func<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:498:16 (bitcoind+0x547960)
    #43 std::__1::function<bool (HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>::operator()(HTTPRequest*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const /usr/lib/llvm-13/bin/../include/c++/v1/__functional/function.h:1175:12 (bitcoind+0x547960)
    #44 HTTPWorkItem::operator()() src/httpserver.cpp:56:9 (bitcoind+0x547960)
    #45 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111:13 (bitcoind+0x54a1a3)
    #46 HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) src/httpserver.cpp:341:12 (bitcoind+0x541c7a)
    #47 decltype(static_cast<void (*>(fp)(static_cast<WorkQueue<HTTPClosure>*>(fp0), static_cast<int>(fp0))) std::__1::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/lib/llvm-13/bin/../include/c++/v1/type_traits:3918:1 (bitcoind+0x54ae15)
    #48 void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int, 2ul, 3ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>&, std::__1::__tuple_indices<2ul, 3ul>) /usr/lib/llvm-13/bin/../include/c++/v1/thread:280:5 (bitcoind+0x54ae15)
    #49 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >(void*) /usr/lib/llvm-13/bin/../include/c++/v1/thread:291:5 (bitcoind+0x54ae15)

  Thread T18 'b-httpworker.0' (tid=50834, running) created by main thread at:
    #0 pthread_create <null> (bitcoind+0xd0c8d)
    #1 std::__1::__libcpp_thread_create(unsigned long*, void* (*)(void*), void*) /usr/lib/llvm-13/bin/../include/c++/v1/__threading_support:443:10 (bitcoind+0x54acfa)
    #2 std::__1::thread::thread<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&, void>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/lib/llvm-13/bin/../include/c++/v1/thread:307:16 (bitcoind+0x54acfa)
    #3 void std::__1::allocator<std::__1::thread>::construct<std::__1::thread, void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&>(std::__1::thread*, void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/lib/llvm-13/bin/../include/c++/v1/__memory/allocator.h:154:28 (bitcoind+0x54a824)
    #4 void std::__1::allocator_traits<std::__1::allocator<std::__1::thread> >::construct<std::__1::thread, void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&, void>(std::__1::allocator<std::__1::thread>&, std::__1::thread*, void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/lib/llvm-13/bin/../include/c++/v1/__memory/allocator_traits.h:290:13 (bitcoind+0x54a824)
    #5 void std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::__emplace_back_slow_path<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/lib/llvm-13/bin/../include/c++/v1/vector:1689:5 (bitcoind+0x54a824)
    #6 std::__1::thread& std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread> >::emplace_back<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/lib/llvm-13/bin/../include/c++/v1/vector:1709:9 (bitcoind+0x541898)
    #7 StartHTTPServer() src/httpserver.cpp:431:31 (bitcoind+0x541898)
    #8 AppInitServers(node::NodeContext&) src/init.cpp:650:5 (bitcoind+0x16663e)
    #9 AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) src/init.cpp:1187:14 (bitcoind+0x15e7a1)
    #10 AppInit(node::NodeContext&, int, char**) src/bitcoind.cpp:234:43 (bitcoind+0x147719)
    #11 main src/bitcoind.cpp:278:13 (bitcoind+0x147719)

SUMMARY: ThreadSanitizer: destroy of a locked mutex (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/bitcoind+0xd2568) in pthread_mutex_destroy
==================
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
